The 8086 microprocessor has a 20-bit address bus, so it can access 1 MB (2²⁰ bytes) of memory.
But registers in 8086 are only 16-bit, which means a single register can point to max 64 KB (2¹⁶) memory.
To solve this, memory segmentation is used.
🔹 Segment Address & Base Address
Memory is divided into segments (chunks of max 64 KB each).
A segment address is stored in a segment register (CS, DS, SS, ES).
Base address of segment = Segment address × 10H (left shift by 4 bits).
Example:
If DS = 1000H → Base address = 1000H × 10H = 10000H.
🔹 Offset Address
Inside each segment, we use an offset address (16-bit).
Offset ranges from 0000H → FFFFH (i.e., max 64 KB).
Offset is stored in registers like IP, BP, SP, BX, SI, DI.
🔹 Logical Address
Combination of Segment : Offset
Example: DS : 1234H
→ means segment DS is base, and offset = 1234H.
🔹 Physical Address
The real 20-bit address in memory.
Formula:
Physical Address =(Segment Address×10𝐻)+Offset
Example:
If DS = 1000H and Offset = 1234H
→ Base address = 10000H
→ Physical address = 10000H + 1234H = 11234H


🔹 Advantages of Segmentation
Can access 1 MB memory even with 16-bit registers.
Separate segments: Code Segment, Data Segment, Stack Segment, Extra Segment.
Each segment can be up to 64 KB.
Supports multitasking → CPU can switch between programs by reloading 4 segment registers.
Keeps code and data separate → better organization & protection.
 So in short:
Logical address = Segment:Offset (what programmer sees).
Physical address = (Segment × 10H) + Offset (what memory sees).



Segment address: 16-bit, reside in segment registers (CS, DS, ES, SS).
 Base address: 20-bit, Segment address × 10H
 Offset address : =Effective address,16-bit,resideinIP,BP,SP,BX,SI,DI.
 Logical address:= Segment : Offset = DS : 1234H
 Physical address :=Real address,=Segment address × 10H +Offset address


Memory Organization
🔹 Key Points:
8086 has a 20-bit address bus → it can address 1 MB memory (00000H – FFFFFH).
The memory is organized into 2 banks of 512 KB each:
Low Bank (Even addresses)
High Bank (Odd addresses)
🔹 Banks:
Low Bank (Even Bank)
Stores data at even addresses (00000H, 00002H, 00004H …).
Selected when: BHE = 1, A0 = 0.
High Bank (Odd Bank)
Stores data at odd addresses (00001H, 00003H, 00005H …).
Selected when: BHE = 0, A0 = 1.
🔹 Why 2 Banks?
The 8086 has a 16-bit data bus, so it can read/write 2 bytes at a time.
If the word starts at an even address, both bytes come from the same cycle (one from low bank, one from high bank).
If the word starts at an odd address, the 8086 needs two memory cycles (since the word is split across two banks).
🔹 Signals Used:
A0 (Address line 0) → decides whether the access is odd/even address.
BHE (Bus High Enable) → decides whether high-order byte (D15–D8) is active.
A0	BHE	Access Type
0	0	Word at even address (both banks active)
0	1	Byte at even address (low bank only)
1	0	Byte at odd address (high bank only)
1	1	Invalid (no memory access)
🔹 Example:
Suppose we want to store a word (2 bytes) at address 10000H.
Lower byte → stored at 10000H (low bank).
Upper byte → stored at 10001H (high bank).
 Both banks accessed simultaneously.
If we store a word at address 10001H (odd address):
Lower byte → stored at 10001H (high bank).
Upper byte → stored at 10002H (low bank).
 Needs 2 memory cycles (slower).


Left Side: Transfer (A) → Even-Addressed Word Transfer
Suppose the CPU wants to read/write a word (16 bits) starting at address A (where A is even, i.e., A0 = 0).
In 8086 memory organization:
(Lower) byte goes into the Low bank (D7–D0).
(Upper) byte goes into the High bank (D15–D8).
Control signals:
A0 = 0 (even address).
BHE = 0 (Bus High Enable active).
Both low and high banks are active in this cycle.
 Result: The full 16-bit word is transferred in one bus cycle.
This is the fast and efficient case.


🔹 Right Side: Transfer (A+1) → Odd-Addressed Word Transfer
Suppose the CPU wants to read/write a word (16 bits) starting at address A+1 (odd address, i.e., A0 = 1).
What happens:
The first byte (at address A+1) is stored in the High bank (D15–D8).
The second byte (at address A+2, which is even) goes into the Low bank (D7–D0).
Problem: Both bytes are not aligned to banks simultaneously.
Control signals:
Cycle 1 → A0 = 1, BHE = 0 → Only high bank active (transfer of byte at odd address).
Cycle 2 → A0 = 0, BHE = 1 → Only low bank active (transfer of next byte).
Result: The word requires two bus cycles (one for each byte).
This makes odd-address word transfers slower than even-address ones.
🔹 Why the Difference?
Even word transfer → naturally aligned to banks, so one cycle is enough.
Odd word transfer → crosses bank boundary, so two cycles are needed.
This is why in 8086 system design, aligning word data at even addresses improves performance.
